Person A ‚Äî Config Parser & Server Setup
1Ô∏è‚É£ Config Parser
    - Read webserv.conf
    - Tokenize lines into keywords, values, symbols
    - Build ServerConfig and LocationConfig structs
Validate:
    - Required directives (listen, root)
    - Syntax correctness (braces, semicolons, allowed directives)
Output: vector of ServerConfig structs

2Ô∏è‚É£ Server Setup
    - Create sockets for each listen port (socket, bind, listen)
    - Maintain list of sockets for incoming connections
Deliverable: Ready-to-use config structs + listening sockets
---------------------------------------------------------------------------------
Person B ‚Äî HTTP Request Parser & Response Handler
1Ô∏è‚É£ HTTP Request Parser
    - Wait for incoming client connections (accept)
    - Read request from socket (recv)
        Parse request:
        Method (GET, POST)
        Path (/index.html)
        HTTP version (HTTP/1.1)
        Headers (Host, Content-Length)
üîµ Use mock structs first if config parser isn‚Äôt ready yet

2Ô∏è‚É£ Response Generator
    - Combine requested path + root from config
    - Check location, index, error_page rules
    - Read file content ‚Üí build response:
        HTTP/1.1 200 OK
        Content-Length: ...
        Content-Type: ...

        <file content>


    - Send response via send()
    - Handle connection close / keep-alive
Deliverable: Fully working HTTP response handler
-------------------------------------------------------------------------------------
Integration Phase
- Once both parsers are done:
    - HTTP request parser replaces mock structs with real structs from config parser
    - Test with multiple servers, locations, and error pages
    - Debug request handling, file serving, and edge cases

‚úÖ Key Notes for Parallel Work
    - Agree on shared data structures before coding (struct fields, vectors, maps).
    - Person B can start request parser using dummy data while Person A builds config parser.
    - Once integration starts, make sure threads / sockets / structs are synchronized properly (no conflict).
